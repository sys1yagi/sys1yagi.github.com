<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oss | visible true]]></title>
  <link href="http://sys1yagi.github.io/blog/categories/oss/atom.xml" rel="self"/>
  <link href="http://sys1yagi.github.io/"/>
  <updated>2014-05-16T10:12:24+09:00</updated>
  <id>http://sys1yagi.github.io/</id>
  <author>
    <name><![CDATA[Toshihiro Yagi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FadingActionBar -open source libraries #001-]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/02/05/fadingactionbar/"/>
    <updated>2014-02-05T22:36:50+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/02/05/fadingactionbar</id>
    <content type="html"><![CDATA[<p>　<a href="http://www.amazon.co.jp/gp/product/4798040029/">Androidオープンソースライブラリ徹底活用</a>の発売以降、続々と新しいライブラリが出てきて、本に載せられなかった分も含めて色々とキャッチアップしていきたいなーと思ったので本に近い形式でライブラリを取り上げていこうかなーと思います。本よりだいぶ砕けた文になると思いますがご了承ください。あと本ではEclipseベースで記述していましたが、ここではAndroid Studioベースで書きます。EclipseでAndroidアプリケーション開発が許されるのは小学生までだと思います。</p>

<h1>FadingActionBar</h1>

<p>ActionBarの領域をフェードできるライブラリ</p>

<ul>
<li>サポートバージョン: 2.2以上</li>
<li>License: Apache 2.0</li>
<li>タイプ: aar, ライブラリプロジェクト</li>
<li><p>公式サイト:<a href="https://github.com/ManuelPeinado/FadingActionBar">https://github.com/ManuelPeinado/FadingActionBar</a></p></li>
<li><p>サンプルコード:<a href="https://github.com/sys1yagi/FadingActionBarSample">https://github.com/sys1yagi/FadingActionBarSample</a></p></li>
</ul>


<h2>概要</h2>

<p>　FadingActionBarはActionBar部分を画面のスクロールにしたがってフェードできるライブラリです。ActionBar部分までコンテンツをオーバーレイさせたい場合に利用できます。また、オーバーレイしたコンテンツ部分をパララックスにする事もできます。</p>

<h3>動作イメージ</h3>

<p>　スクロールすると指定した色にActionBarがフェードします。ファーストビューでコンテンツを大きく見せられます。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/01.jpg" width="200px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/02.jpg" width="200px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/03.jpg" width="200px"/></p>

<!-- more -->


<h2>導入手順</h2>

<p>　FadingActionBarはaar(Android archive)形式をサポートしており、build.gradleのdependenciesに定義するだけでライブラリを利用できます。以下の定義は通常のActionBarでFradingActionBarを利用する場合の設定です。</p>

<p><code>groovy
dependencies {
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar:3.1.0'
}
</code></p>

<p>　FadingActionBarは通常のActionBarの他に、appcompat-v7のActionBarCompatやActionBarSherlockをサポートしています。ActionBarCompatを使う場合、ActionBarSherlockを使う場合の設定をそれぞれ以下に示します。</p>

<h3>ActionBarCompat</h3>

<p><code>groovy
dependencies {
  compile 'com.android.support:appcompat-v7:+'
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar-abc:3.1.0'
}
</code></p>

<h3>ActionBarSherlock</h3>

<p><code>groovy
dependencies {
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar-abs:3.1.0'
}
</code></p>

<p>　Eclipseを使う場合は、FadingActionBarをcloneし、ライブラリプロジェクトとして参照してください。</p>

<h2>FadingActionBarを使う</h2>

<p>　FadingActionBarは以下の様な画面のスクロールが発生するレイアウトでの利用を想定しています。</p>

<ul>
<li>ScrollView</li>
<li>WebView</li>
<li>ListView</li>
</ul>


<p>　ここではActionBarCompatでScrollViewを使う例を解説します。</p>

<h3>テーマの定義をする</h3>

<p>　まず、FadingActionBarを利用するにあたって必要なテーマを定義します。通常ActionBarは不透明で、コンテンツ領域はActionBarの表示領域の下部から始まります。これらのスタイルを変更して、背景を透過し、コンテンツ領域にオーバーレイするActionBarにします。</p>

<p>　以下の例では<code>AppTheme</code>という名前でActionBarの透過、オーバーレイの定義をしています。</p>

<p>```xml
<resources></p>

<p>  <style name="Widget.ActionBar" parent="@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse">
  </style></p>

<p>  <style name="Widget.ActionBar.Transparent"></p>

<pre><code>&lt;item name="android:background"&gt;@android:color/transparent&lt;/item&gt;
&lt;item name="background"&gt;@android:color/transparent&lt;/item&gt;
</code></pre>

<p>  </style></p>

<p>  <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"></p>

<pre><code>&lt;item name="actionBarStyle"&gt;@style/Widget.ActionBar.Transparent&lt;/item&gt;
&lt;item name="windowActionBarOverlay"&gt;true&lt;/item&gt;
&lt;item name="android:windowContentOverlay"&gt;@null&lt;/item&gt;
</code></pre>

<p>  </style></p>

<p></resources></p>

<p>```</p>

<p>　<code>AppTheme</code>をAndroidManifest.xmlのapplication要素に設定します。application要素だとアプリケーション内の全てのActivityにテーマが適用されてしまうので、Activity毎に個別に適用したい場合はactivity要素に設定してください。</p>

<p>```xml
&lt;application</p>

<pre><code>android:icon="@drawable/ic_launcher"
android:label="@string/app_name"
android:theme="@style/AppTheme"&gt;

&lt;!-- 省略 --&gt;
</code></pre>

<p></application>
```</p>

<h3>ヘッダのレイアウトを作成する</h3>

<p>　FadingActionBarは、ActionBarにオーバーレイするヘッダ部分と、それ以外のコンテンツ部分を異なるレイアウトで管理します。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/04.jpg" width="400px"/></p>

<p>　以下のXMLはヘッダに表示するレイアウトの例です。多くの場合大きなImageViewを利用する事になるでしょう。</p>

<p>```xml
&lt;ImageView</p>

<pre><code>xmlns:android="http://schemas.android.com/apk/res/android"
android:src="@drawable/main_photo"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:scaleType="centerCrop"
android:adjustViewBounds="true"
/&gt;
</code></pre>

<p>```</p>

<h3>コンテンツのレイアウトを作成する</h3>

<p>　次にコンテンツのレイアウトを定義します。ここで重要なのは、ヘッダ、コンテンツどちらのレイアウトにも<code>ScrollView</code>が登場していない点です。FadingActionBarが自動的に<code>ScrollView</code>でこれらのレイアウトをラップするので自分で定義する必要はありません。</p>

<p>```xml
&lt;LinearLayout</p>

<pre><code>xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"
android:background="?android:attr/windowBackground"
&gt;
</code></pre>

<p>  &lt;TextView</p>

<pre><code>  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:background="@drawable/shape_header"
  android:padding="10dp"
  android:textStyle="bold"
  android:text="photo by"
  /&gt;
</code></pre>

<p>  &lt;TextView</p>

<pre><code>  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:padding="10dp"
  android:text="http://www.flickr.com/photos/legin101/5480688759"
  /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>FadingActionBarHelperでレイアウトを初期化する</h3>

<p>　レイアウトの初期化はFadingActionBarHelperクラスを使って行います。FadingActionBarHelperクラスは環境によって異なるパッケージに定義されています。ActionBarCompatを利用する場合は<code>.extras.actionbarcompat</code>のFadingActionBarHelperクラスを利用する事になります。</p>

<p>　以下の様にActivityのonCreateメソッドでFadingActionBarHelperクラスを作成し、メソッドチェーンで必要なパラメータをセットします。</p>

<p>```java
import com.manuelpeinado.fadingactionbar.extras.actionbarcompat.FadingActionBarHelper;</p>

<p>//中略
public class MainActivity extends ActionBarActivity {</p>

<p>  @Override
  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);

FadingActionBarHelper helper = new FadingActionBarHelper()
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .contentLayout(R.layout.activity_main);
</code></pre>

<p>```</p>

<p>　上記コードで呼び出しているFadingActionBarHelperクラスのメソッドについて以下の表に示します。headerLayoutメソッド及び、contentLayoutメソッドは必ず呼び出してレイアウトの値を設定しなければなりません。</p>

<table>
<thead>
<tr>
<th>名前</th>
<th>解説</th>
<th>必須</th>
</tr>
</thead>
<tbody>
<tr>
<td>actionBarBackground(int drawableResId)</td>
<td>フェード後のActionBarの背景を設定できます</td>
<td>×</td>
</tr>
<tr>
<td>headerLayout(int layoutId)</td>
<td>ActionBarにオーバーレイするレイアウトを設定できます</td>
<td>○</td>
</tr>
<tr>
<td>contentLayout(int layoutId)</td>
<td>ヘッダレイアウトの下部に表示するコンテンツ領域のレイアウトを設定できます</td>
<td>○</td>
</tr>
</tbody>
</table>


<p>　FadingActionBarHelperクラスの初期化が終わったら、initActionBarメソッドを呼び出してActionBarに設定を反映します。その後createViewメソッドを使って画面に表示するViewを作成します。createViewメソッドで取り出せるViewには設定したヘッダとコンテンツのレイアウトが含まれています。</p>

<p>```java</p>

<pre><code>helper.initActionBar(this);

setContentView(helper.createView(this));
</code></pre>

<p>  }
```</p>

<p>　実際にcreateViewメソッドで取り出せるViewの<a href="http://visible-true.blogspot.jp/2012/02/view.html">Treeをダンプする</a>と以下の様な構造である事がわかります。</p>

<p>```
com.manuelpeinado.fadingactionbar.view.RootLayout
 android.widget.FrameLayout
  android.widget.ImageView
  android.view.View
 com.manuelpeinado.fadingactionbar.view.ObservableScrollView
  android.widget.LinearLayout
   android.widget.FrameLayout
   android.widget.LinearLayout</p>

<pre><code>android.widget.TextView
android.widget.TextView
</code></pre>

<p>```</p>

<p>　これでActionBarにコンテンツをオーバーレイし、ActionBarをスクロールに従ってフェードできる様になります。</p>

<h2>Fragmentで使う</h2>

<p>　FragmentでFadingActionBarを利用する場合は、FadingActionBarHelperクラスをonCreateViewメソッドのタイミングで初期化します。これだけでOKです。</p>

<p>```java
public class ParallaxFragment extends Fragment {
  //中略<br/>
  @Override
  public View onCreateView(LayoutInflater inflater, ViewGroup container,</p>

<pre><code>  Bundle savedInstanceState) {
FadingActionBarHelper fadingActionBarHelper = new FadingActionBarHelper()
    .actionBarBackground(android.R.color.holo_blue_light)
    .headerLayout(R.layout.header_main)
    .contentLayout(R.layout.activity_main);

fadingActionBarHelper.initActionBar(getActivity());
View view = fadingActionBarHelper.createView(inflater);
return view;
</code></pre>

<p>  }
}
```</p>

<h2>パララックスの設定をする</h2>

<p>　FadingActionBarはヘッダ部分をパララックスにできます。FadingActionBarHelperクラスのparallaxメソッドで設定できます。デフォルトではオンになっています。</p>

<p>```java
FadingActionBarHelper helper = new FadingActionBarHelper()
  .parallax(false)
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .contentLayout(R.layout.activity_main);</p>

<p>```</p>

<p>　パララックス有りと無しでは、以下の様にスクロール時のヘッダの表示が変わります。パララックス有りだとスクロール量より遅めにヘッダ部分がスクロールします。</p>

<table>
<thead>
<tr>
<th>パララックス有り</th>
<th>パララックス無し</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/05.jpg" width="250px"/></td>
<td><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/06.jpg" width="250px"/></td>
</tr>
</tbody>
</table>


<h2>HeaderOverlayを使う</h2>

<p>　ヘッダにボタン等の操作用UIを配置したい場合、パララックスをオンにしているとスクロール時に表示がズレてしまうので管理が大変です。HeaderOverlayを使うと、ヘッダの前面にオーバーレイするViewを追加する事ができ、パララックスの影響を受けないレイアウトを作れます。</p>

<p>　HeaderOverlayはFadingActionBarHelperクラスのheaderOverlayLayoutメソッドでセットできます。</p>

<p><code>java
FadingActionBarHelper fadingActionBarHelper = new FadingActionBarHelper()
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .headerOverlayLayout(R.layout.header_overlay)
  .contentLayout(R.layout.activity_main);
</code></p>

<p>　以下の様にスクロールしてもパララックスの影響を受けないViewを追加できます。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/07.jpg" width="250px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/08.jpg" width="250px"/></p>

<h2>おわりに</h2>

<p>　軽めに書くつもりが結構なボリュームになってしまった・・・。FadingActionBarなかなかよさそうですね。ただ自前でテーマ定義する部分は少し面倒です。aar形式なのだし、ライブラリ側に含める事が出来るんじゃないかなぁ・・・と思いました。暇があれば検証&amp;pull reqしてみようかなと思います。</p>
]]></content>
  </entry>
  
</feed>
