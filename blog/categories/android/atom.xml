<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | visible true]]></title>
  <link href="http://sys1yagi.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://sys1yagi.github.io/"/>
  <updated>2014-02-13T12:59:47+09:00</updated>
  <id>http://sys1yagi.github.io/</id>
  <author>
    <name><![CDATA[Toshihiro Yagi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第4回 #potatotips で発表されたAndroidの8つのtipsまとめ]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/02/13/potatotips04/"/>
    <updated>2014-02-13T09:22:26+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/02/13/potatotips04</id>
    <content type="html"><![CDATA[<p>毎月恒例のpotatoips第四回が開催されましたー。</p>

<p><a href="https://github.com/potatotips/potatotips/wiki/potatotips-4">potatotips (iOS/Android開発Tips共有会) 第4回</a></p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/search?q=%23potatotips&amp;src=hash">#potatotips</a> <a href="https://t.co/RyMjBl2dgD">https://t.co/RyMjBl2dgD</a> <a href="http://t.co/vlOp1qXZUT">pic.twitter.com/vlOp1qXZUT</a></p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/433539924684320768">February 12, 2014</a></blockquote>


<script async src="http://sys1yagi.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>iOSのtipsまとめは<a href="https://twitter.com/himara2">@himara2</a>さんが<a href="http://himaratsu.hatenablog.com/entry/potatotips4">第4回 #potatotips で発表されたiOSに関する9つのtips</a>にまとめて下さっています。</p>

<p>ここでは発表されたAndroidの8つのtipsをまとめます。</p>

<!-- more -->


<h2>1.ProductFlavorの自動化に関するTips</h2>

<p>発表者:<a href="https://twitter.com/ichigotake">@ichigotake</a></p>

<p>発表資料 Gist-><a href="https://gist.github.com/ichigotake/8952787">https://gist.github.com/ichigotake/8952787</a></p>

<p>ProductFlavorではパッケージ名依存のパーミッションの適用ができない。
例えば以下の様なproviderのauthoritiesにパッケージ名を使う場合、ProductFlavorでflavor毎にパッケージ名を変えていたら腐ってしまう。</p>

<p>```
&lt;provider</p>

<pre><code>name=".MyProvider"
authorities="com.example.free"&gt;
</code></pre>

<p>```</p>

<p>どうするか！？自動化してもいいと思うが、まぁ手動でflavor毎のAndroidManifest.xml用意でいいかー的な。
確かに手動でもよさそう。Lintみたいなのがあると捗るかもなー</p>

<h2>2.GitHub活動を通して個人のキャリアを積みつつ仕事の成果を出したい(震え声)</h2>

<p>発表者:<a href="https://twitter.com/rejasupotaro">@rejasupotaro</a></p>

<p>発表資料: ブログ-><a href="http://rejasupotaro.github.io/2014/02/11/36.html">How to build a career through github activities</a></p>

<script async class="speakerdeck-embed" data-id="d07deda0755701312eb91a125ab0a9e4" data-ratio="1.33333333333333" src="http://sys1yagi.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日行われた<a href="http://confwd2.peatix.com/">Conference With Developers 2</a>で<a href="https://twitter.com/ninjinkun">@ninjinkun</a>さんが発表したいい話を共有！</p>

<ol>
<li>試しやすくする</li>
<li>組み込みやすくする
 githubにmavenのrepositoryとして使える様にする</li>
<li>品質を高める</li>
<li>表現を工夫する</li>
<li>広報</li>
</ol>


<p>全体的に同意で一部やっている。Wercker使おうっと。</p>

<h2>3.アプリの評価を良くするということについて考える･続</h2>

<p>発表者:<a href="https://twitter.com/hotchemi">@hotchemi</a></p>

<script async class="speakerdeck-embed" data-id="7330ea20757e0131f8d9163615956c67" data-ratio="1.33333333333333" src="http://sys1yagi.github.io//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://twitter.com/rejasupotaro">@rejasupotaro</a>氏の<a href="http://rejasupotaro.github.io/2014/01/16/29.html">アプリの評価を良くするということについて考える</a>のつづきで、評価を促す施策を個人的に試してみた話し。</p>

<p>あと<a href="https://github.com/hotchemi/Android-Rate">Android-Rate</a>ってライブラリを作ったよという話。チラ見した感じいい感じな気がする。</p>

<h2>4.AndroidGradlePlugin(0.7.3以降)でndk-buildする方法</h2>

<p>発表者:<a href="https://twitter.com/androhi">@androhi</a></p>

<p><a href="http://www.amazon.co.jp/dp/4873116244">NFC Hacks</a>の著者のひとり！！
AndroidStudioでNDK使う話。AndroidGradlePluginは今0.8系で、ちょい前にNDKが対応された。</p>

<script async class="speakerdeck-embed" data-id="2c57b50075b40131f0be026a5a2b7ed1" data-ratio="1.33333333333333" src="http://sys1yagi.github.io//speakerdeck.com/assets/embed.js"></script>


<p>ProductFlavorでABI毎にapk分けたりもできる。便利。ASにC/C++書く環境が揃ってないんでコード書くのはつらぽ。故事的にはIntelliJ Ultimateでいいんじゃないかを感じている。</p>

<h2>5.ListView/ViewHolderのベストプラクティスを考えてみた</h2>

<p>発表者:<a href="https://twitter.com/__gfx__">@<strong>gfx</strong></a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31118486" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/gorof/generationg-viewholder-pattern-with-gradle" title="Generationg ViewHolder pattern with Gradle" target="_blank">Generationg ViewHolder pattern with Gradle</a> </strong> from <strong><a href="http://www.slideshare.net/gorof" target="_blank">Goro Fuji</a></strong> </div></p>

<p>Gradleでビルド前に割り込んでlayout.xmlを解析し、ソースコード生成をしてViewHolderを勝手に作る！
しかし！layout.xmlには罠があった！重複するidやincludeとかなんとか！単純なコードでは成立しない→つらい
俺達の戦いはまだ始まったばかりだ！</p>

<p>これ実現すると色々楽になるよなーという気がする。</p>

<h2>6.The end of confusion of callback between activity and fragment.</h2>

<p>発表者:<a href="https://twitter.com/sys1yagi">@sys1yagi</a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31119281" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/bs_yagi/04-31119281" title="Potato04 The end of confusion of callback between activity and fragment." target="_blank">Potato04 The end of confusion of callback between activity and fragment.</a> </strong> from <strong><a href="http://www.slideshare.net/bs_yagi" target="_blank">Toshihiro Yagi</a></strong> </div></p>

<p>ActivityとFragment間の連携ってなんか考慮ポイント多くてだるいですよね。という事でそういうのを解決する軽量シンプルお手軽なライブラリを作りました。</p>

<p><a href="https://github.com/sys1yagi/indirect-injector">GitHub &ndash; indirect-injector</a></p>

<p>GitHub活動を通して個人のキャリアを積みつつ仕事の成果を出したいのでサンプルやREADMEの充実など色々やっていきたい。</p>

<h2>7.AndroidのExtarnalStorageまとめ</h2>

<p>発表者:<a href="https://twitter.com/mhidaka">@mhidaka</a></p>

<p>発表資料: ブログ-><a href="http://d.hatena.ne.jp/hdk_embedded/20140212/1392206381">AndroidのExternal Storageの開発者向けまとめ</a></p>

<p>Kitkat以降でSDカード使えないんじゃ問題へのわかりやすい解説。Externalは外部じゃなくて「拡張」だ！！！
各OSバージョンでのExternal Storageに関する神比較表が。これは超はかどる。</p>

<p>あとEffective iOS書こうぜ！というお話も。書きましょう！</p>

<h2>8.EspressoのUsageTrackerについて</h2>

<p>発表者:<a href="https://twitter.com/sumio_tym">@sumio_tym</a></p>

<script async class="speakerdeck-embed" data-id="218646a076210131f9bd26949f98b546" data-ratio="1.33333333333333" src="http://sys1yagi.github.io//speakerdeck.com/assets/embed.js"></script>


<p>Espressoは実行時に利用統計の様なものを外部送信するけど新しくTestRunnerでくるんでdisableAnalytics=trueすれば防げるぜという話。</p>

<h2>まとめ</h2>

<p>だんだん濃くなっている気がする。ぽてち駆動で新ライブラリの登場パターンが増えてきている。ハードル高まっている！もちろんもっとカジュアルでもいいのよ！！皆さんのおいしいぽてちをお待ちしています！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FadingActionBar -open source libraries #001-]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/02/05/fadingactionbar/"/>
    <updated>2014-02-05T22:36:50+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/02/05/fadingactionbar</id>
    <content type="html"><![CDATA[<p>　<a href="http://www.amazon.co.jp/gp/product/4798040029/">Androidオープンソースライブラリ徹底活用</a>の発売以降、続々と新しいライブラリが出てきて、本に載せられなかった分も含めて色々とキャッチアップしていきたいなーと思ったので本に近い形式でライブラリを取り上げていこうかなーと思います。本よりだいぶ砕けた文になると思いますがご了承ください。あと本ではEclipseベースで記述していましたが、ここではAndroid Studioベースで書きます。EclipseでAndroidアプリケーション開発が許されるのは小学生までだと思います。</p>

<h1>FadingActionBar</h1>

<p>ActionBarの領域をフェードできるライブラリ</p>

<ul>
<li>サポートバージョン: 2.2以上</li>
<li>License: Apache 2.0</li>
<li>タイプ: aar, ライブラリプロジェクト</li>
<li><p>公式サイト:<a href="https://github.com/ManuelPeinado/FadingActionBar">https://github.com/ManuelPeinado/FadingActionBar</a></p></li>
<li><p>サンプルコード:<a href="https://github.com/sys1yagi/FadingActionBarSample">https://github.com/sys1yagi/FadingActionBarSample</a></p></li>
</ul>


<h2>概要</h2>

<p>　FadingActionBarはActionBar部分を画面のスクロールにしたがってフェードできるライブラリです。ActionBar部分までコンテンツをオーバーレイさせたい場合に利用できます。また、オーバーレイしたコンテンツ部分をパララックスにする事もできます。</p>

<h3>動作イメージ</h3>

<p>　スクロールすると指定した色にActionBarがフェードします。ファーストビューでコンテンツを大きく見せられます。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/01.jpg" width="200px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/02.jpg" width="200px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/03.jpg" width="200px"/></p>

<!-- more -->


<h2>導入手順</h2>

<p>　FadingActionBarはaar(Android archive)形式をサポートしており、build.gradleのdependenciesに定義するだけでライブラリを利用できます。以下の定義は通常のActionBarでFradingActionBarを利用する場合の設定です。</p>

<p><code>groovy
dependencies {
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar:3.1.0'
}
</code></p>

<p>　FadingActionBarは通常のActionBarの他に、appcompat-v7のActionBarCompatやActionBarSherlockをサポートしています。ActionBarCompatを使う場合、ActionBarSherlockを使う場合の設定をそれぞれ以下に示します。</p>

<h3>ActionBarCompat</h3>

<p><code>groovy
dependencies {
  compile 'com.android.support:appcompat-v7:+'
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar-abc:3.1.0'
}
</code></p>

<h3>ActionBarSherlock</h3>

<p><code>groovy
dependencies {
  compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar-abs:3.1.0'
}
</code></p>

<p>　Eclipseを使う場合は、FadingActionBarをcloneし、ライブラリプロジェクトとして参照してください。</p>

<h2>FadingActionBarを使う</h2>

<p>　FadingActionBarは以下の様な画面のスクロールが発生するレイアウトでの利用を想定しています。</p>

<ul>
<li>ScrollView</li>
<li>WebView</li>
<li>ListView</li>
</ul>


<p>　ここではActionBarCompatでScrollViewを使う例を解説します。</p>

<h3>テーマの定義をする</h3>

<p>　まず、FadingActionBarを利用するにあたって必要なテーマを定義します。通常ActionBarは不透明で、コンテンツ領域はActionBarの表示領域の下部から始まります。これらのスタイルを変更して、背景を透過し、コンテンツ領域にオーバーレイするActionBarにします。</p>

<p>　以下の例では<code>AppTheme</code>という名前でActionBarの透過、オーバーレイの定義をしています。</p>

<p>```xml
<resources></p>

<p>  <style name="Widget.ActionBar" parent="@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse">
  </style></p>

<p>  <style name="Widget.ActionBar.Transparent"></p>

<pre><code>&lt;item name="android:background"&gt;@android:color/transparent&lt;/item&gt;
&lt;item name="background"&gt;@android:color/transparent&lt;/item&gt;
</code></pre>

<p>  </style></p>

<p>  <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"></p>

<pre><code>&lt;item name="actionBarStyle"&gt;@style/Widget.ActionBar.Transparent&lt;/item&gt;
&lt;item name="windowActionBarOverlay"&gt;true&lt;/item&gt;
&lt;item name="android:windowContentOverlay"&gt;@null&lt;/item&gt;
</code></pre>

<p>  </style></p>

<p></resources></p>

<p>```</p>

<p>　<code>AppTheme</code>をAndroidManifest.xmlのapplication要素に設定します。application要素だとアプリケーション内の全てのActivityにテーマが適用されてしまうので、Activity毎に個別に適用したい場合はactivity要素に設定してください。</p>

<p>```xml
&lt;application</p>

<pre><code>android:icon="@drawable/ic_launcher"
android:label="@string/app_name"
android:theme="@style/AppTheme"&gt;

&lt;!-- 省略 --&gt;
</code></pre>

<p></application>
```</p>

<h3>ヘッダのレイアウトを作成する</h3>

<p>　FadingActionBarは、ActionBarにオーバーレイするヘッダ部分と、それ以外のコンテンツ部分を異なるレイアウトで管理します。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/04.jpg" width="400px"/></p>

<p>　以下のXMLはヘッダに表示するレイアウトの例です。多くの場合大きなImageViewを利用する事になるでしょう。</p>

<p>```xml
&lt;ImageView</p>

<pre><code>xmlns:android="http://schemas.android.com/apk/res/android"
android:src="@drawable/main_photo"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:scaleType="centerCrop"
android:adjustViewBounds="true"
/&gt;
</code></pre>

<p>```</p>

<h3>コンテンツのレイアウトを作成する</h3>

<p>　次にコンテンツのレイアウトを定義します。ここで重要なのは、ヘッダ、コンテンツどちらのレイアウトにも<code>ScrollView</code>が登場していない点です。FadingActionBarが自動的に<code>ScrollView</code>でこれらのレイアウトをラップするので自分で定義する必要はありません。</p>

<p>```xml
&lt;LinearLayout</p>

<pre><code>xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"
android:background="?android:attr/windowBackground"
&gt;
</code></pre>

<p>  &lt;TextView</p>

<pre><code>  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:background="@drawable/shape_header"
  android:padding="10dp"
  android:textStyle="bold"
  android:text="photo by"
  /&gt;
</code></pre>

<p>  &lt;TextView</p>

<pre><code>  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:padding="10dp"
  android:text="http://www.flickr.com/photos/legin101/5480688759"
  /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>FadingActionBarHelperでレイアウトを初期化する</h3>

<p>　レイアウトの初期化はFadingActionBarHelperクラスを使って行います。FadingActionBarHelperクラスは環境によって異なるパッケージに定義されています。ActionBarCompatを利用する場合は<code>.extras.actionbarcompat</code>のFadingActionBarHelperクラスを利用する事になります。</p>

<p>　以下の様にActivityのonCreateメソッドでFadingActionBarHelperクラスを作成し、メソッドチェーンで必要なパラメータをセットします。</p>

<p>```java
import com.manuelpeinado.fadingactionbar.extras.actionbarcompat.FadingActionBarHelper;</p>

<p>//中略
public class MainActivity extends ActionBarActivity {</p>

<p>  @Override
  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);

FadingActionBarHelper helper = new FadingActionBarHelper()
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .contentLayout(R.layout.activity_main);
</code></pre>

<p>```</p>

<p>　上記コードで呼び出しているFadingActionBarHelperクラスのメソッドについて以下の表に示します。headerLayoutメソッド及び、contentLayoutメソッドは必ず呼び出してレイアウトの値を設定しなければなりません。</p>

<table>
<thead>
<tr>
<th>名前</th>
<th>解説</th>
<th>必須</th>
</tr>
</thead>
<tbody>
<tr>
<td>actionBarBackground(int drawableResId)</td>
<td>フェード後のActionBarの背景を設定できます</td>
<td>×</td>
</tr>
<tr>
<td>headerLayout(int layoutId)</td>
<td>ActionBarにオーバーレイするレイアウトを設定できます</td>
<td>○</td>
</tr>
<tr>
<td>contentLayout(int layoutId)</td>
<td>ヘッダレイアウトの下部に表示するコンテンツ領域のレイアウトを設定できます</td>
<td>○</td>
</tr>
</tbody>
</table>


<p>　FadingActionBarHelperクラスの初期化が終わったら、initActionBarメソッドを呼び出してActionBarに設定を反映します。その後createViewメソッドを使って画面に表示するViewを作成します。createViewメソッドで取り出せるViewには設定したヘッダとコンテンツのレイアウトが含まれています。</p>

<p>```java</p>

<pre><code>helper.initActionBar(this);

setContentView(helper.createView(this));
</code></pre>

<p>  }
```</p>

<p>　実際にcreateViewメソッドで取り出せるViewの<a href="http://visible-true.blogspot.jp/2012/02/view.html">Treeをダンプする</a>と以下の様な構造である事がわかります。</p>

<p>```
com.manuelpeinado.fadingactionbar.view.RootLayout
 android.widget.FrameLayout
  android.widget.ImageView
  android.view.View
 com.manuelpeinado.fadingactionbar.view.ObservableScrollView
  android.widget.LinearLayout
   android.widget.FrameLayout
   android.widget.LinearLayout</p>

<pre><code>android.widget.TextView
android.widget.TextView
</code></pre>

<p>```</p>

<p>　これでActionBarにコンテンツをオーバーレイし、ActionBarをスクロールに従ってフェードできる様になります。</p>

<h2>Fragmentで使う</h2>

<p>　FragmentでFadingActionBarを利用する場合は、FadingActionBarHelperクラスをonCreateViewメソッドのタイミングで初期化します。これだけでOKです。</p>

<p>```java
public class ParallaxFragment extends Fragment {
  //中略<br/>
  @Override
  public View onCreateView(LayoutInflater inflater, ViewGroup container,</p>

<pre><code>  Bundle savedInstanceState) {
FadingActionBarHelper fadingActionBarHelper = new FadingActionBarHelper()
    .actionBarBackground(android.R.color.holo_blue_light)
    .headerLayout(R.layout.header_main)
    .contentLayout(R.layout.activity_main);

fadingActionBarHelper.initActionBar(getActivity());
View view = fadingActionBarHelper.createView(inflater);
return view;
</code></pre>

<p>  }
}
```</p>

<h2>パララックスの設定をする</h2>

<p>　FadingActionBarはヘッダ部分をパララックスにできます。FadingActionBarHelperクラスのparallaxメソッドで設定できます。デフォルトではオンになっています。</p>

<p>```java
FadingActionBarHelper helper = new FadingActionBarHelper()
  .parallax(false)
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .contentLayout(R.layout.activity_main);</p>

<p>```</p>

<p>　パララックス有りと無しでは、以下の様にスクロール時のヘッダの表示が変わります。パララックス有りだとスクロール量より遅めにヘッダ部分がスクロールします。</p>

<table>
<thead>
<tr>
<th>パララックス有り</th>
<th>パララックス無し</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/05.jpg" width="250px"/></td>
<td><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/06.jpg" width="250px"/></td>
</tr>
</tbody>
</table>


<h2>HeaderOverlayを使う</h2>

<p>　ヘッダにボタン等の操作用UIを配置したい場合、パララックスをオンにしているとスクロール時に表示がズレてしまうので管理が大変です。HeaderOverlayを使うと、ヘッダの前面にオーバーレイするViewを追加する事ができ、パララックスの影響を受けないレイアウトを作れます。</p>

<p>　HeaderOverlayはFadingActionBarHelperクラスのheaderOverlayLayoutメソッドでセットできます。</p>

<p><code>java
FadingActionBarHelper fadingActionBarHelper = new FadingActionBarHelper()
  .actionBarBackground(android.R.color.holo_blue_light)
  .headerLayout(R.layout.header_main)
  .headerOverlayLayout(R.layout.header_overlay)
  .contentLayout(R.layout.activity_main);
</code></p>

<p>　以下の様にスクロールしてもパララックスの影響を受けないViewを追加できます。</p>

<p><img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/07.jpg" width="250px"/>
<img src="http://sys1yagi.github.io/images/2014-02-05-fadingactionbar/08.jpg" width="250px"/></p>

<h2>おわりに</h2>

<p>　軽めに書くつもりが結構なボリュームになってしまった・・・。FadingActionBarなかなかよさそうですね。ただ自前でテーマ定義する部分は少し面倒です。aar形式なのだし、ライブラリ側に含める事が出来るんじゃないかなぁ・・・と思いました。暇があれば検証&amp;pull reqしてみようかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スマホアプリを新規作成したらいくらかかる？ #モバイル見積もり 勉強会に行ってきました]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/01/26/estimate-mobile-app/"/>
    <updated>2014-01-26T11:21:18+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/01/26/estimate-mobile-app</id>
    <content type="html"><![CDATA[<p><img src="http://sys1yagi.github.io/images/2014-01-26-estimate-mobile-app/mobilequote.jpg"/></p>

<p>1月某日に、<a href="http://wordbench.org/2014/01/14/wordbench-kobe/">WordPressサイトを構築するといくらかかる？ 見積り勉強会で価格を出してみた</a>をみて興味をもったモバイルアプリ開発者の集いが<a href="http://www.ni-ichicafe.com/">渋谷21cafeさん</a>で開催されました。</p>

<p><a href="http://www.zusaar.com/event/3147004">スマホアプリを新規作成したらいくらかかる？モバイル見積もり勉強会 #モバイル見積</a></p>

<p>そのまんま、WordPressサイトの見積もりのスマホアプリ版ですね。</p>

<h2>開催の経緯</h2>

<blockquote class="twitter-tweet" lang="ja"><p>WordPressサイトを構築するといくらかかる？ 見積り勉強会で価格を出してみた | WordBench <a href="http://t.co/WOd1So9SGF">http://t.co/WOd1So9SGF</a> これのアプリ版やりたいなぁ</p>&mdash; ようてん (@youten_redo) <a href="https://twitter.com/youten_redo/statuses/422999502090297345">2014, 1月 14</a></blockquote>


<script async src="http://sys1yagi.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>やりたいって言っただけなのに俺が主催で開催される流れになってるこわい</p>&mdash; ようてん (@youten_redo) <a href="https://twitter.com/youten_redo/statuses/423003026920456192">2014, 1月 14</a></blockquote>


<script async src="http://sys1yagi.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>言い出しっぺの法則という事で見事に<a href="https://twitter.com/youten_redo">@youten_redo</a>さんが爆撃され開催の運びに。
詳細については<a href="http://greety.sakura.ne.jp/redo/2014/01/post-41.html">カレー屋チェーン店公式アプリの仮想案件をみんなで見積もってみた #モバイル見積</a>を参照してください。</p>

<!-- more -->


<h2>前提</h2>

<p>先に意識しておいてほしいのは、今回の見積もり会は「時間制限あり」で「概算見積もり」で「それぞれのチームで解釈が異なった」という所が多分に価格に出ているという点です。</p>

<p>あるチームは「エンジニアに実現可能性と工数を聞く」というレベル感で出していたり、あるチームは「リスク込み、交渉材料込みのフルに近い数字」で出してたり様々です。でも「時間制限あり」という事で当然ながら全体的に考慮漏れの方が多いです。</p>

<p>特に「概算見積もり」という点は大きくて、全チームの数字のどれもが最終価格ではないと思ってください。最終的に大切な事は「顧客に価値を提供する事」と「利益を出す」事であり、それは実際に顧客とコミュニケーションしていく中で落としこんでいくものです。今回の数字はその辺に至る前のたたき台の更にその前みたいなものです。</p>

<p>皆えいやっ、で出した調整前の生の数字だったりするので面白かったりもします。</p>

<h2>チーム分け</h2>

<p>会場には円形のテーブルがいくつかあって、最初に座った所がチームとなりました。見積もりというと割と各企業でセンシティブなものだったりする気がするので、参加者の誰がどこのチームに属したかは伏せておきます。</p>

<h2>割りとガチな要件</h2>

<p>見積もりに関する事前の情報はなしという事で皆現場で<a href="https://docs.google.com/a/cookpad.jp/file/d/0BybSp1RcLhkVczFkU1czd3g3Yms/edit">ガイダンス</a>や<a href="https://docs.google.com/a/cookpad.jp/file/d/0B3JEBJmnCulYcUVoOXA5ZUhjSUU/edit">公式アプリ開発方針書</a>の説明を聞きながら簡単に要求の把握を。</p>

<p>ざっくり言うとカレー屋さんの公式アプリで、店舗でNFC、iBeaconでのチェックアウト&amp;クーポン発行ができて、GPSでの店舗検索や、メニューとか最新情報が見れるというもの。予算感はなし(無尽蔵と考えてよい)、期間は3ヶ月、単金は固定で80、戦略価格(過度な割引等)はなし、Q&amp;Aは主催の二人に都度確認するといった条件で見積もり、最終的に見積もり書テンプレートに工数、金額を書き発表するという流れ。</p>

<p>発表内容は金額に加えて、「どういう作戦で見積もったか」「どういう点で苦労したか」「どういう点で盛り上がったか」「アピールポイント」を含める。</p>

<p><a href="https://docs.google.com/a/cookpad.jp/spreadsheet/ccc?key=0AnJEBJmnCulYdHYxZFJFOUg5c2ppczlVbExFTHlvVUE&amp;usp=drive_web#gid=0">画面仕様書や要求仕様書</a>がある程度しっかりあって「ここまで予め情報が揃ってる案件ってほとんど見たことない！」というのが第一印象でしょうか。基本もっと夢いっぱいのパワポがあって、コチラで要求仕様おこしたりするよねー。概算の前にその段階でNFC, iBeaconは削るだろうな。</p>

<h2>細かく検討すると時間が足りない</h2>

<p>ざっくり見ると割りとありそうな感じの要求。見積もりの時間は19:10~20:30の約１時間半で、仕様理解や曖昧な点の確認、前提条件や制約事項等を詰めていくには厳しい感じ。なので各チームだいぶフォーカスがバラけた気がする。ので中盤、終盤からだいぶ皆テキトーになっていると思う。</p>

<h2>Aチーム</h2>

<p>僕はAチームでした。結果としては税込みで1400万くらい。今回は顧客の予算が無限という前提だったので、ある程度しっかりのせました。また端末調達等も含んでいるので厚めになっています。時間が足らなかったので見積書の方の記載はだいぶ適当に。</p>

<p><a href="https://docs.google.com/a/cookpad.jp/spreadsheet/ccc?key=0AnJEBJmnCulYdDg4VEtydm9DNXltczg5dGVLc1lHLWc&amp;usp=drive_web#gid=3">お見積書 株式会社ペッパー警部　御中</a></p>

<p><a href="https://docs.google.com/a/cookpad.jp/spreadsheet/ccc?key=0AnJEBJmnCulYdDg4VEtydm9DNXltczg5dGVLc1lHLWc&amp;usp=drive_web#gid=11">詳細な見積もり</a>の方に色々な内訳があります。時間の兼ね合いで全体的にすげー適当です。すっげー適当だからね！思いついた項目全部のせてざっくり数字入れただけなんで、そこから削りとかなんとかの調整はしてません。</p>

<h3>見積もりにあたって考えた色々</h3>

<p>まず顧客の属性を考えると、NFC, iBeaconに対する要求は思いつきである可能性が高いです。日経新聞とかITニュースとかで知ったよ、という所で実際に開発、導入するにあたって制約やコスト感やユーザビリティをそこまで検討はしていないと思われます。これは単純にリスクで、当然その辺りの対応は厚く見積もる事になります。</p>

<p>NFC, iBeaconを店舗でのクーポン発行に使うという事なので、QRコードやGPSで代替できそうです。今回は見積もりにQRコード対応を入れています。NFC, iBeaconの実機手配や試験や開発周りの費用諸々を引くと大体1000を切る形に調整しています。最終で980くらいに調整できれば、というのが見積もり時の感覚でした。</p>

<p>この辺は実際に概算を出しつつ、NFC, iBeaconに関するプライオリティを先方に確認しつつ検討していく事になります。まじでNFC, iBeaconをやりたいというのであれば、QRコードをメインにして、数店舗で先行実験をする形で別途検討すべきではとかいった提案をすると思います。いきなり100店舗はむりぽ。その辺りを詰めれば価格はもっと落ち着くはずです。また、先方のシステム部で別途NFC, iBeacon周りのすべてをやるのでアプリ側は仕様に沿ってロジック書くだけでいいんだ、という事ならもっと抑えられるでしょう。その辺は概算もって打ち合わせないとなんとも言えないです。</p>

<p>他の部分についても同様にゆらぐ点がたくさんあります。その辺も概算だして詰める感じですね。</p>

<p>主催のようてんさんの見積もり「<a href="http://greety.sakura.ne.jp/redo/2014/01/post-42.html">せっかくだから見積もってみた</a>」の価格を見てもやっぱりそのくらいだよなー感があります。ただ内訳はだいぶ違いますね。Androidテストがでかいのは要求機種数が多いためで、ここは打ち合わせの中で対象端末を大幅に絞って削られるでしょう。「要求機種数が多い」点は現場ではすくいきれなかったなー。皆テスト周りの見積もりは超ざっくりだったです。</p>

<p>大事なことなので何回も書きますが、最終的に大切な事は「顧客に価値を提供する事」と「利益を出す」事であり、それは実際に顧客とコミュニケーションしていく中で落としこんでいくものです。一口に要求、見積もりといってもお互いの状態によって大きくゆらぎます。</p>

<h2>他のチーム</h2>

<p>170-600くらいまで。製造コストだよね、感が強かった。でも会社の規模感によってもその辺は変化するかもしれない。けど300台は無いかなー。600は色々調整後あるかもしれない。あと相手の予算感にも強い影響を受けるので一概にどーとかは言い切れない所もある。</p>

<h2>おわりに</h2>

<p>今回は短時間でざっくり見積もり、いわゆるライブ見積もりという事で、技法云々とか根拠云々とかはなかなか頭回らなかったなーと思います。その辺の技法に関する勉強色々したいなーとかも思ったり。</p>

<p>最終的に大切な事は「顧客に価値を提供する事」と「利益を出す」事であり、それは実際に顧客とコミュニケーションしていく中で落としこんでいくものなので、今回の結果は飽くまで概算であり、そこから色々なプロセスを経て価格が決まって契約に至るという所はマジで意識して頂けると世界平和に一歩近づくのではないかと思います＼(^o^)／</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第3回はヤフー開催！ #potatotips で発表されたAndroidのtipsまとめ]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/01/15/potatotips-3/"/>
    <updated>2014-01-15T19:11:45+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/01/15/potatotips-3</id>
    <content type="html"><![CDATA[<p>iOSまとめはコチラ→<a href="http://himaratsu.hatenablog.com/entry/potatotips3">第3回はヤフー開催！ #potatotips で発表されたiOSのtipsまとめ</a></p>

<p>potatotips 第3回に参加してきました。今回はヤフーオフィスでの開催！
<a href="https://github.com/potatotips/potatotips/wiki/Potatotips-3">https://github.com/potatotips/potatotips/wiki/Potatotips-3</a></p>

<blockquote class="twitter-tweet" lang="ja"><p>potatotips#3 in ヤフーさんに参加中！ <a href="https://twitter.com/search?q=%23potatotips&amp;src=hash">#potatotips</a> <a href="http://t.co/sDo41dfCg4">pic.twitter.com/sDo41dfCg4</a></p>&mdash; 所 友太 (@tokorom) <a href="https://twitter.com/tokorom/statuses/423396114457317377">2014, 1月 15</a></blockquote>


<script async src="http://sys1yagi.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- more -->


<p>potatotipsは発表者だけが参加できる、持ち時間1人5分のtips共有会です。
いつもはクックパッド開催していましたが、今回はヤフーさんと合同開催する運びとなりました。三回に一回はクックパッド外での開催にしたいと思っているので「やろうず(^q^)」という方は是非所さんなどに声掛けください。</p>

<p>そんな第3回で発表された9つのAndroidのtipsをまとめます！</p>

<h2>レビューを良くするには</h2>

<p><a href="https://twitter.com/rejasupotaro">@rejasupotaro</a>さん。</p>

<p>発表はGistで行っていたので、スライドはなし。まとめがブログに→
<a href="http://rejasupotaro.github.io/blog/2014/01/16/29/">アプリの評価を良くするということについて考える</a></p>

<p>個人的に気になったのは、レビューダイアログを出すライブラリの存在。こんなんあったんだなー。ほげー。</p>

<ul>
<li>iOS: <a href="https://github.com/nicklockwood/iRate">iRate</a></li>
<li>Android: <a href="https://github.com/kskkbys/Android-RateThisApp">Android-RateThisApp</a></li>
</ul>


<p>評価周りはなかなか難しい。個人的にはGoogle Playによく顔を出し、評価コメントにレスしたり、アプリ説明の所で現在やってる事とか注意とかを更新し続けるというのが地道かつ有効な方法かなーと感じているものの、「もっといい方法あるんじゃないか」という気もしている。</p>

<p>あとACRAいいよACRA。</p>

<h2>アプリでもオブジェクト思考エクササイズ</h2>

<p><a href="https://twitter.com/shoma2da">@shoma2da</a>さん。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30032646" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shoma2da/potatotips3-shoma2da" title="アプリでもオブジェクト指向エクササイズ（Potatotips#3）" target="_blank">アプリでもオブジェクト指向エクササイズ（Potatotips#3）</a> </strong> from <strong><a href="http://www.slideshare.net/shoma2da" target="_blank">Shoichi Matsuda</a></strong> </div></p>

<p>ThoughtWorksアンソロジーに書かれているエクササイズらしい。気になる。制約が多い。</p>

<p><a href="http://www.amazon.co.jp/dp/487311389X"><img src="http://ecx.images-amazon.com/images/I/51FOBZPjz-L._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU09_.jpg" alt="01" /><br/>ThoughtWorksアンソロジー ―アジャイルとオブジェクト指向によるソフトウェアイノベーション</a></p>

<p>実戦にいきなり持ち込むのは危険な香りがするものの、あるテーマをこの制約で実装する「エクササイズマラソン」とかやると面白いかもしれないなと思う。「ひとつのクラスにフィールド2個まで」ってのは脳みそ痺れる。あとAmazonでは値段高騰しててつらぽ。</p>

<h2>Fitting解像度対応β</h2>

<p><a href="https://twitter.com/tq_ne_jp">@taqoo_negishi</a>さん。</p>

<p>なんと発表はイラレ。レイヤーを切り替えてページ遷移。そっちに気を取られてしまった！
SurfaceViewを使ったゲームアプリを作っていて、画面幅等で倍率を動的に求め、その値を使って画像サイズやタッチ位置を補正する感じにしている。という発表。
UI設計としては正方形に納める事を意識していて、変なサイズの画面が来ても大丈夫にしている。</p>

<p><a href="https://twitter.com/tq_ne_jp">@taqoo_negishi</a>さんのアプリはコチラ→<a href="https://play.google.com/store/apps/developer?id=TaQoo">https://play.google.com/store/apps/developer?id=TaQoo</a>
Cocos2dやUnity等は使わずSurfaceViewでフルスクラッチだそう。イラレで発表していたのでリソース類も自分で作っているのではないかと思う。すげー。</p>

<p>あとイラレすごい。</p>

<h2>ちょっと優しい入力項目</h2>

<p><a href="https://twitter.com/sakebook">@sakebook</a>さん。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30043058" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/sakebook/ss-30043058" title="ちょっと優しい入力項目" target="_blank">ちょっと優しい入力項目</a> </strong> from <strong><a href="http://www.slideshare.net/sakebook" target="_blank">Shinya Sakemoto</a></strong> </div></p>

<p>EditTextのフォーカス移動の話。この辺意外と理解が曖昧だったりするのでこういった資料があると非常に捗る。フォーカスまじ大変。バージョンで挙動違うからなーつらい。</p>

<h2>Reflectionを使おう、というお話</h2>

<p><a href="https://twitter.com/kobito_kaba">@kobito_kaba</a>さん。</p>

<p>AndroidのバージョンチェックしてAPI Levelが足りない場合呼び分けるという処理を書いた時、
Android1.6だとクラスロード時点で存在しないメソッドがあると死ぬ問題があって、このためリフレクションを使って回避できるよねという話。でも今や1.6対応って意味ない。ではどういう時に使うか。</p>

<ul>
<li>root取らないといけない時とか</li>
</ul>


<p>もう一個あったと思いますが忘れてしまいました・・・。
rootの件は、たとえばDNS設定は2.xではふつーに書き換えられたけど、3.x以降では塞がれた、しかしリフレクションによって書き換えが可能に！という話。これでテストも捗る。という。</p>

<p>しかし聞いていると、なんかこう、セキュリティ・ホールでは・・・？という気がしてきた。ちょっと調べてみよう。
リフレクションは便利だけどこわいなーやっぱり。</p>

<h2>TDDでアプリ開発。カバレッジ8%を目指せ（消費税連携！？）</h2>

<p><a href="https://twitter.com/tarotaro4">@tarotaro4</a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30039278" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/tkawashita/20140115-potato-tips-no3-android-app-test-development-driven-and" title="20140115 potato tips No.3 Android App Test Development Driven and Jenkins CI Start" target="_blank">20140115 potato tips No.3 Android App Test Development Driven and Jenkins CI Start</a> </strong> from <strong><a href="http://www.slideshare.net/tkawashita" target="_blank">tkawashita </a></strong> </div></p>

<p>CloudBeesでCIする感じ。CloudBees知らなかったので是非使いたい。emmaは次期Gradle pluginでサポートされるようなので期待。全バリエーションは１回のビルド&amp;テストで6時間かかるらしいのでやはりCIの道は険しい。「ローカルテストは小学生まで」は心に刻んでおきたい。</p>

<h2>KotlinでAndroidアプリ開発！(後編)</h2>

<p><a href="https://twitter.com/sys1yagi">私</a>です。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30039475" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/bs_yagi/potato03" title="Potato03 KotlinでAndroidアプリ開発(後編)" target="_blank">Potato03 KotlinでAndroidアプリ開発(後編)</a> </strong> from <strong><a href="http://www.slideshare.net/bs_yagi" target="_blank">Toshihiro Yagi</a></strong> </div></p>

<p>Kotlinｻｲｺｰ！</p>

<h2>Gradleの共通ルーチンをテストする（後編）</h2>

<p><a href="https://twitter.com/__gfx__">@<strong>gfx</strong></a>さん。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30039867" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/gorof/potatotips3" title="Gradleだってテストしたい #potatotips" target="_blank">Gradleだってテストしたい #potatotips</a> </strong> from <strong><a href="http://www.slideshare.net/gorof" target="_blank">Goro Fuji</a></strong> </div></p>

<p>Gradle周りはガッツリ触ってないのでこういう感じで色々やってみるのはよさそーだなーとｵﾓﾀ。ﾏｸﾛとか書けるんじゃない感ある。もはやGroovyっていうより、Gradleな世界観があって理解が大変だったりする。しかもGradle周りのソースには.javaが混在してて魔界感がある。Power Assertはいいなー。</p>

<h2>AndroidのHTTPライブラリってどれがいいんでしょうか</h2>

<p>飛び入り参加の<a href="https://twitter.com/ninjinkun">@ninjinkun</a>さん。</p>

<p>最近Android界隈に迷い込んだのだとか。よいHTTPライブラリを探していて、</p>

<ul>
<li><a href="http://square.github.io/retrofit/">Retrofit</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley">Volley</a></li>
<li><a href="https://github.com/loopj/android-async-http">android-async-http</a></li>
</ul>


<p>とかがよさ気なのかなという話。</p>

<p><a href="http://square.github.io/retrofit/">Retrofit</a>知らなかったSquareまじｶｯｹｰ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parcelableを自動生成する]]></title>
    <link href="http://sys1yagi.github.io/blog/2014/01/13/parcel-generator/"/>
    <updated>2014-01-13T12:28:21+09:00</updated>
    <id>http://sys1yagi.github.io/blog/2014/01/13/parcel-generator</id>
    <content type="html"><![CDATA[<p>ParcelableはSerializableより制約が少なくていいんですが自分で直列化処理を書かないといけないのでだるいです。</p>

<p>Android Studioで利用できるプラグイン「<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">Android Parcelable code generator</a>」を使えば簡単にParcelableを自動生成できます。</p>

<!-- more -->


<h2>インストール</h2>

<p>Android Studioを起動して、[Preference]&ndash;[Plugins]を開き、<code>Browse repositories…</code>を押下してください。</p>

<p><img src="/images/2014-01-08-android-selector-chapek/01.png" alt="01" /></p>

<p>Browse Repositoriesで<code>parcelable code gen</code>で絞り込むとpluginが見つかるので、ダブルクリックしてインストールしてください。</p>

<p><img src="/images/2014-01-13-parcel-generator/01.png" alt="02" /></p>

<h2>対象クラスを作る</h2>

<p>Parcelableにしたいクラスを作っていきます。よくあるUserクラスとかにしておきます。</p>

<p>```java
package com.example.app;</p>

<p>public class User {</p>

<p>  private int mId;</p>

<p>  private String mName;</p>

<p>  public User(int id, String name){</p>

<pre><code>mId = id;
mName = name;
</code></pre>

<p>  }</p>

<p>}
```</p>

<h2>Parcelableを生成する</h2>

<p>エディタの中で右クリックするとコンテキストメニューに「Generate&hellip;」があるので選択します。</p>

<p><img src="/images/2014-01-13-parcel-generator/02.png" alt="03" /></p>

<p>Generateの項目のうち「Generate Parcelable」を選択します。</p>

<p><img src="/images/2014-01-13-parcel-generator/03.png" alt="04" /></p>

<p>Parcelableで保存する対象となるフィールドを選択します。基本的に全部選択しておけばよいでしょう。</p>

<p><img src="/images/2014-01-13-parcel-generator/04.png" alt="05" /></p>

<p>するとParcelableの実装が生成されます。</p>

<p>```java
package com.example.app;</p>

<p>import android.os.Parcel;
import android.os.Parcelable;</p>

<p>public class User implements Parcelable {</p>

<pre><code>private int mId;

private String mName;

public User(int id, String name){
    mId = id;
    mName = name;
}

@Override
public int describeContents() {
    return 0;
}

@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeInt(this.mId);
    dest.writeString(this.mName);
}

private User(Parcel in) {
    this.mId = in.readInt();
    this.mName = in.readString();
}

public static Parcelable.Creator&lt;User&gt; CREATOR = new Parcelable.Creator&lt;User&gt;() {
    public User createFromParcel(Parcel source) {
        return new User(source);
    }

    public User[] newArray(int size) {
        return new User[size];
    }
};
</code></pre>

<p>}
```</p>

<h2>おわりに</h2>

<p>楽ちん！</p>
]]></content>
  </entry>
  
</feed>
